# -*- coding: utf-8 -*-
"""AA: Medical Cost Demo Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WqRXWGNWxitulKkIR11Glcrh9GJh0Ra
"""




import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_absolute_error
import tensorflow as tf

# --------------------
# Page Config
# --------------------
st.set_page_config(page_title="Medical Insurance Cost Predictor", layout="wide")
st.title("ðŸ’° Medical Insurance Cost Predictor")

# --------------------
# Load Dataset
# --------------------
@st.cache_data
def load_data():
    url = "https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv"
    df = pd.read_csv(url)
    return df


df = load_data()
st.subheader("Dataset Preview")
st.dataframe(df.head())

# --------------------
# Data Visualization
# --------------------
with st.expander("ðŸ“Š Explore Data"):
    st.write("Pairplot of features")
    fig = sns.pairplot(df, diag_kind="kde")
    st.pyplot(fig)

# --------------------
# Data Preprocessing
# --------------------
X = df.drop(columns=["expenses"])
y = np.log(df["expenses"])  # log-transform target

numFeat = ["age", "bmi", "children"]
catFeat = ["sex", "smoker", "region"]

preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numFeat),
        ("cat", OneHotEncoder(), catFeat),
    ]
)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=11
)

X_train = preprocessor.fit_transform(X_train)
X_test = preprocessor.transform(X_test)

# --------------------
# Model Definition
# --------------------
def create_model(input_shape):
    model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=(input_shape,)),
        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Dropout(0.3),
        tf.keras.layers.Dense(64, activation="relu"),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Dropout(0.3),
        tf.keras.layers.Dense(1),
    ])
    model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
        loss="mae",
        metrics=["mae"],
    )
    return model


# --------------------
# Train Model Button
# --------------------
st.subheader("ðŸ”® Try Your Own Prediction")
col1, col2, col3 = st.columns(3)
with col1:
    age = st.slider("Age", 18, 64, 30)
    bmi = st.slider("BMI", 15.0, 40.0, 25.0)
with col2:
    children = st.number_input("Children", 0, 5, 1)
    sex = st.selectbox("Sex", ["male", "female"])
with col3:
    smoker = st.selectbox("Smoker", ["yes", "no"])
    region = st.selectbox("Region", df["region"].unique())

    if st.button("Predict"):
        input_df = pd.DataFrame([[age, bmi, children, sex, smoker, region]],
                        columns=["age", "bmi", "children", "sex", "smoker", "region"])

    input_transformed = preprocessor.transform(input_df)
    y_log = model.predict(input_transformed).flatten()[0]
    pred = np.exp(y_log) - 1   # Reverse log(â€¦+1)

    st.success(f"ðŸ’° Estimated Medical Expense: **${pred:,.2f}**")

# --------------------
# Plot
# --------------------
    fig, ax = plt.subplots(figsize=(10, 10))
    ax.hist(df['expenses'])
    ax.bar(["Predicted Expense"], [pred], color="skyblue")
    ax.set_ylabel("Expense ($)")
    ax.set_title("Predicted Medical Expense")
    st.pyplot(fig)
