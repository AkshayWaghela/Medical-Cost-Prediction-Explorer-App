# -*- coding: utf-8 -*-
"""AA: Medical Cost Demo Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WqRXWGNWxitulKkIR11Glcrh9GJh0Ra
"""

pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_absolute_error

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

import seaborn as sns
sns.pairplot(dataset)







df = dataset

X = df.drop(columns=['expenses'])  # Features
y = np.log(df['expenses'])  # Target

numFeat = ['age', 'bmi', 'children']
catFeat = ['sex', 'smoker', 'region']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numFeat),
        ('cat', OneHotEncoder(), catFeat)
    ])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=11)

X_train = preprocessor.fit_transform(X_train)
X_test = preprocessor.transform(X_test)

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1)  # Single output for regression
])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='mae', metrics=['mae'])

early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
lr_scheduler = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5)

history = model.fit(X_train, y_train,
                    epochs=100,
                    batch_size=16,
                    validation_split=0.2,
                    callbacks=[early_stopping, lr_scheduler],
                    verbose=1)

y_pred = np.exp(model.predict(X_test).flatten())  # Reverse log-transform for predictions
y_test_original = np.exp(y_test)  # Reverse log-transform for true values

mae = mean_absolute_error(y_test_original, y_pred)
print(f"Mean Absolute Error: {mae}")



plt.hist(y_pred)



import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_absolute_error
import tensorflow as tf

# --------------------
# Page Config
# --------------------
st.set_page_config(page_title="Medical Insurance Cost Predictor", layout="wide")
st.title("ðŸ’° Medical Insurance Cost Predictor")

# --------------------
# Load Dataset
# --------------------
@st.cache_data
def load_data():
    url = "https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv"
    df = pd.read_csv(url)
    return df


df = load_data()
st.subheader("Dataset Preview")
st.dataframe(df.head())

# --------------------
# Data Visualization
# --------------------
with st.expander("ðŸ“Š Explore Data"):
    st.write("Pairplot of features")
    fig = sns.pairplot(df, diag_kind="kde")
    st.pyplot(fig)

# --------------------
# Data Preprocessing
# --------------------
X = df.drop(columns=["expenses"])
y = np.log(df["expenses"])  # log-transform target

numFeat = ["age", "bmi", "children"]
catFeat = ["sex", "smoker", "region"]

preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numFeat),
        ("cat", OneHotEncoder(), catFeat),
    ]
)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=11
)

X_train = preprocessor.fit_transform(X_train)
X_test = preprocessor.transform(X_test)

# --------------------
# Model Definition
# --------------------
def create_model(input_shape):
    model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=(input_shape,)),
        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Dropout(0.3),
        tf.keras.layers.Dense(64, activation="relu"),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Dropout(0.3),
        tf.keras.layers.Dense(1),
    ])
    model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
        loss="mae",
        metrics=["mae"],
    )
    return model


# --------------------
# Train Model Button
# --------------------
if st.button("ðŸš€ Train Model"):
    model = create_model(X_train.shape[1])
    early_stopping = tf.keras.callbacks.EarlyStopping(
        monitor="val_loss", patience=10, restore_best_weights=True
    )
    lr_scheduler = tf.keras.callbacks.ReduceLROnPlateau(
        monitor="val_loss", factor=0.5, patience=5
    )

    history = model.fit(
        X_train,
        y_train,
        epochs=100,
        batch_size=16,
        validation_split=0.2,
        callbacks=[early_stopping, lr_scheduler],
        verbose=0,
    )

    # Plot training history
    st.subheader("ðŸ“ˆ Training History")
    fig, ax = plt.subplots()
    ax.plot(history.history["mae"], label="Train MAE")
    ax.plot(history.history["val_mae"], label="Val MAE")
    ax.set_xlabel("Epoch")
    ax.set_ylabel("MAE")
    ax.legend()
    st.pyplot(fig)

    # Evaluate
    y_pred = np.exp(model.predict(X_test).flatten())
    y_test_original = np.exp(y_test)
    mae = mean_absolute_error(y_test_original, y_pred)
    st.success(f"âœ… Mean Absolute Error: {mae:.2f} expenses")

    # Plot True vs Predictions
    st.subheader("ðŸŽ¯ Predictions vs True Values")
    fig2, ax2 = plt.subplots()
    ax2.scatter(y_test_original, y_pred, alpha=0.6)
    ax2.plot([0, max(y_test_original)], [0, max(y_test_original)], "r--")
    ax2.set_xlabel("True Values")
    ax2.set_ylabel("Predicted Values")
    st.pyplot(fig2)

    # --------------------
    # User Input for Prediction
    # --------------------
    st.subheader("ðŸ”® Try Your Own Prediction")
    col1, col2, col3 = st.columns(3)
    with col1:
        age = st.slider("Age", 18, 64, 30)
        bmi = st.slider("BMI", 15.0, 40.0, 25.0)
    with col2:
        children = st.number_input("Children", 0, 5, 1)
        sex = st.selectbox("Sex", ["male", "female"])
    with col3:
        smoker = st.selectbox("Smoker", ["yes", "no"])
        region = st.selectbox("Region", df["region"].unique())

    if st.button("Predict My Expense"):
        input_df = pd.DataFrame(
            [[age, bmi, children, sex, smoker, region]],
            columns=["age", "bmi", "children", "sex", "smoker", "region"],
        )
        input_transformed = preprocessor.transform(input_df)
        pred = np.exp(model.predict(input_transformed).flatten()[0])
        st.info(f"ðŸ’¡ Estimated Medical Expense: **${pred:,.2f}**")